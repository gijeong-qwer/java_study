package com.choongang.stm;

import com.choongang.stm.controller.Controller;

// 학습의 필터링 순서

// 반복 - 처음 하는 사람들은 : 너무 이해하려고 하지말고 써보다가 숙련되기 (실전으로 숙련도 쌓기) // 보고해도됨
// 1.무의미한 반복 해야함 최소 5번 , 절대 외우지 말것!!!! 익숙해지라는거임 ***** ( 굳이 생각 안하고 몸에 익혀보기 ) - 2주 동안 ****
// 혼자 해볼때 어떻게 할 지 모르겠으면 - 기능부터해보기 *** >> 문법오류 없는 순서로 반복*** 빨간줄 나오지 않게 만들기

// 초반에는 Repository 클래스는 그냥 복사하고 시작해도됨(단, 레포지토리가 어떤 역할을 하는지 정도는 알고 시작) >> DB쪽이라 그런거긴한데 걍 ㄱㄱ 

// 2.반복 - 이해를 목적으로 반복 , 이해가 됬으면 수정도 좀 해봐야함 >> 구조를 이해하기 위함!! , 지워보면서 어떤오류가 생기는지 확인 (코드 변경해보기)
//  ex) 논리 문법들 구조 - Controller->Service->Repository (내가 자연스럽게 받아들인 부분과 못하는 부분 구분해서 반복하기) // 보고해도됨
// 3.복기 - ***안보고하는것 
// 복기의 목적 >> 안막히는 부분 : 이해가 되고 있는것, 막히는 부분: 내가 이해못한 부분 >> 어디인지 찾고 어떤 부분이 약한지 포인트를 체크하고 공부 **(공부해야하는 포인트)
// - 주의사항 : 절대~ 급하더라도 강제로 외우지는 말 것  >> 복기하다가 잘안되는 타이밍  공부하고 확인하고 반복하다 다시 복기하면됨
// 4.응용 - 추가 기능 개발, 학생관리가 아닌 새로운 프로젝트 진행  **** 3번잘하면 4번 해보기

public class App {
    public static void main(String[] args) { // main을 갖고 코드를 짜는건 사실상 설계오류 그냥시작점
        // Controller controller = new Controller(); // Controller 자동완성 때문에 import되는거
        // 집중해서 보기
        // controller.run();
        new Controller().run(); // 실행하자마자 끝내라

    }
}
// App은 Controller을 의존함  >>한번이라도 사용하면 의존하는것 
// App은 Service를 의존하지 않음 >> 직접적으로 코드상에서 한번이라도 명시되지 않은경우
// 반대로 말하면 Controller는 App을 위해서 코드를 작성하고있다고 생각 할 수 있음
// 클래스를 짤 때는 내가 혼자 한다고 생각하지 않고 파트를 나눈다고 생각하고 구성을 해야함
// App을 만드는 사람과 Controller을 만드는 사람은 Api를 제공해야하는데 run이라는 Api를 제공하고있음
// Controller는 run만 public이고 그외엔 private으로 구성되어있음 >> 이런것이 캡슐화
// run만 사용할 수 있게 노출을 시키고 , 그외엔 보여주지 않는 느낌
// 정보은닉이 중요한이유 (private) >> Controller. 을 하면 너무 여러가지 나와서 사용자도 헷갈림
// 사용자가 쓰지 말아야할것을 private으로 만들고 public으로 사용할것만 구성하면 controller.했을때 사용자가 사용하기 편함
